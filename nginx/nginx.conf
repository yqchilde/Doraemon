
# 工作进程的数量。最佳值取决于很多因素：cpu 核心数、存储驱动器数等
# 将其设置为 cpu 核心总数是一个很好的起点，或者将其保留为“自动”
# 最大连接数 = worker_processes worker_connections
worker_processes auto;

# 工作进程的最大打开文件数 (RLIMIT_NOFILE)
# 应该是 > worker_connections
worker_rlimit_nofile 8192;

events {
    # 工作进程可以同时打开的最大连接数
    # 同时连接不能超过打开文件的最大数量
    # 因此：worker_connections < worker_rlimit_nofile
    worker_connections 8000;
}

http {
    # 在响应的标头上启用或禁用发出 nginx 版本
    server_tokens off;
    underscores_in_headers on;

    # 服务器名称哈希表的最大大小和存储桶大小
    server_names_hash_max_size 1024;
    server_names_hash_bucket_size 32;

    # 通过使用 sendfile() 而不是 read() 和 write() 组合来加速静态文件传输
    # sendfile() 具有从文件描述符传输数据的能力
    sendfile on;

    # 优化一次发送的数据量
    # 防止 Nginx 发送部分帧
    # 结果，它将增加吞吐量，因为 TCP 帧将在发送之前被填满。您还需要激活 `sendfile` 选项
    tcp_nopush on;

    # 默认情况下，TCP 堆栈实现了一种将数据发送延迟最多 200 毫秒的机制
    # 要强制套接字立即发送其缓冲区中的数据，我们可以打开此选项
    tcp_nodelay on;

    # 保持活动连接将保持打开状态的超时
    # 更长的持续时间对客户端更好，尤其是在 SSL 上，缺点是工作连接被占用的时间更长.
    # keepalive_timeout 20s;

    # Mime types.
    include mime.types;
    default_type application/octet-stream;

    # 更新字符集以匹配更新后的 mime.types
    # 默认情况下，`text html` 总是包含在 charset 模块中
    charset_types
        text/css
        text/plain
        text/vnd.wap.wml
        application/javascript
        application/json
        application/rss+xml
        application/xml;

    # 启用 gzip 压缩
    gzip on;

    # Gzip 压缩级别 (1-9)
    # 5 是大小和 CPU 使用率之间的完美折衷，为大多数 ASCII 文件提供了大约 75% 的减少（几乎与级别 9 相同）
    gzip_comp_level 5;

    # 不要压缩不太可能缩小很多的小文件
    # gzip 压缩后，小文件通常也会以较大的文件大小结束
    gzip_min_length 256;

    # 即使是代理连接也可以压缩数据
    gzip_proxied any;

    # 每当客户端的 Accept-Encoding 功能标头发生变化时，都会缓存资源的常规版本和 gzip 压缩版本
    gzip_vary on;

    # 压缩以下所有 mime 类型，`texthtml` 总是被压缩
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

    server {
        listen 80;
        listen [::]:80;
        server_name localhost;
        charset utf-8;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        # 反向代理实例
        location /test/ {
            client_max_body_size 50M;
            client_body_buffer_size 50M;
            proxy_http_version 1.1;
            proxy_pass http://192.168.1.1:8080/;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-NginX-Proxy true;

            # 跨域处理，需将前端需要的Header按需编写
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods 'POST,GET,OPTIONS,DELETE,PUT';
            add_header Access-Control-Allow-Headers 'Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        error_log /var/log/nginx/error.log;
        access_log /var/log/nginx/access.log;
    }
}
